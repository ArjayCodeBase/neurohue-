from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, EmailStr
from sqlalchemy import create_engine, Column, Integer, String, Date
from sqlalchemy.orm import declarative_base, sessionmaker, Session
from passlib.context import CryptContext
import datetime

# =====================================
# DATABASE SETUP
# =====================================
DATABASE_URL = "sqlite:///./users.db"
engine = create_engine(DATABASE_URL, connect_args={"check_same_thread": False})
Base = declarative_base()
SessionLocal = sessionmaker(bind=engine, autoflush=False, autocommit=False)

# =====================================
# PASSWORD HASHING
# =====================================
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def hash_password(password: str):
    if len(password.encode('utf-8')) > 72:
        password = password[:72]  # safely truncate
    return pwd_context.hash(password)

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

# =====================================
# FASTAPI APP INIT
# =====================================
app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # adjust if needed for security
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# =====================================
# DATABASE MODEL
# =====================================
class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True)
    email = Column(String, unique=True)
    password = Column(String)
    firstname = Column(String)
    lastname = Column(String)
    birthday = Column(Date)
    gender = Column(String)
    address = Column(String)
    role = Column(String)
    condition = Column(String)

Base.metadata.create_all(bind=engine)

# =====================================
# Pydantic Schemas
# =====================================
class RegisterSchema(BaseModel):
    username: str
    email: EmailStr
    password: str
    firstname: str
    lastname: str
    birthday: str  # in YYYY-MM-DD
    gender: str
    address: str
    role: str
    condition: str

class LoginSchema(BaseModel):
    username: str
    password: str

# =====================================
# Dependency
# =====================================
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# =====================================
# ROUTES
# =====================================

# ---------- REGISTER ----------
@app.post("/signup")
def signup(user: RegisterSchema, db: Session = Depends(get_db)):
    existing_user = db.query(User).filter((User.username == user.username) | (User.email == user.email)).first()
    if existing_user:
        raise HTTPException(status_code=400, detail="Username or email already exists")

    new_user = User(
        username=user.username,
        email=user.email,
        password=hash_password(user.password),
        firstname=user.firstname,
        lastname=user.lastname,
        birthday=datetime.datetime.strptime(user.birthday, "%Y-%m-%d").date(),
        gender=user.gender,
        address=user.address,
        role=user.role,
        condition=user.condition
    )

    db.add(new_user)
    db.commit()
    db.refresh(new_user)
    return {"message": "User registered successfully!"}

# ---------- LOGIN ----------
@app.post("/login")
def login(user: LoginSchema, db: Session = Depends(get_db)):
    db_user = db.query(User).filter(User.username == user.username).first()
    if not db_user:
        raise HTTPException(status_code=400, detail="Invalid username or password")

    if not verify_password(user.password, db_user.password):
        raise HTTPException(status_code=400, detail="Invalid username or password")

    return {
        "message": "Login successful",
        "user": {
            "id": db_user.id,
            "username": db_user.username,
            "email": db_user.email,
            "role": db_user.role,
            "condition": db_user.condition
        }
    }
